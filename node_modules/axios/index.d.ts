export interface AxiosRequestConfig {
  url?: string;
  method?: string;
  baseURL?: string;
  headers?: Record<string, string>;
  data?: any;
  timeout?: number;
  withCredentials?: boolean;
  signal?: AbortSignal;
}

export interface AxiosResponse<T = any> {
  data: T;
  status: number;
  statusText: string;
  headers: Record<string, string>;
  config: AxiosRequestConfig;
  request: any;
}

export type AxiosPromise<T = any> = Promise<AxiosResponse<T>>;

export interface AxiosError<T = any> extends Error {
  config: AxiosRequestConfig;
  request?: any;
  response?: AxiosResponse<T>;
  isAxiosError: boolean;
}

export interface AxiosInterceptorManager<V> {
  use(onFulfilled?: (value: V) => V | Promise<V>, onRejected?: (error: any) => any): number;
}

export interface AxiosInstance {
  <T = any>(config: AxiosRequestConfig): AxiosPromise<T>;
  <T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
  defaults: AxiosRequestConfig;
  interceptors: {
    request: AxiosInterceptorManager<AxiosRequestConfig>;
    response: AxiosInterceptorManager<AxiosResponse>;
  };
  request<T = any>(config: AxiosRequestConfig): AxiosPromise<T>;
  get<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
  delete<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
  head<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
  options<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
  post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;
  put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;
  patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;
}

export interface AxiosStatic extends AxiosInstance {
  create(config?: AxiosRequestConfig): AxiosInstance;
  AxiosError: new <T = any>(message: string, config: AxiosRequestConfig, request?: any, response?: AxiosResponse<T>) => AxiosError<T>;
  isAxiosError(error: any): error is AxiosError;
  all<T>(promises: Promise<T>[]): Promise<T[]>;
  spread<T extends (...args: any[]) => any>(callback: T): (arr: Parameters<T>) => ReturnType<T>;
}

declare const axios: AxiosStatic;
export default axios;
